Git (от англ. Global Information Tracker) — распределённая система хранения версий для фиксации изменений в файлах, которая представляет собой набор консольных утилит. Она разработана для координации работы между программистами, но в целом может использоваться и для других целей

системы контроля версий


Установим имя пользователя и адрес электронной почты. Эти данные будут отображены в каждом изменении, которое вы вносите, и другие пользователи смогут понять, кто автор тех или иных изменений.
git config --global user.name "Name"
git config --global user.email email@example.ru
опция --global. Это достаточно будет ввести один раз эти данные и они будут сохранены для всех проектов. Если вы захотите поменять информацию, то нужно будет ввести ту же команду, только без  --global.

Создание локального репозитория
Удобнее всего иметь на компьютере папку в корневой директории и в ней вести все свои проекты. Такую папку можно назвать, например, projects или dev (от слова development — «разработка»).

Как создать репозиторий:
1 mkdir projects - Создать новую папку в корневом каталоге (терминал открывается в нём по умолчанию).
2 cd projects - Перейти внутрь projects.
3 mkdir Skillfactory - Создать новую папку Skillfactory.
4 cd Skillfactory - Перейти внутрь Skillfactory.
5 git init - Инициализировать папку Skillfactory как Git-репозиторий.

В терминале у вас должна появиться примерно такая запись (только с вашими данными вместо blahblah):

Initialized empty Git repository in /Users/blahblah/projects/Skillfactory/.git/
Blahblahs-MacBook-Air:Skillfactory blahblah$ - И это значит, что локальный Git-репозиторий создан!

Чтобы проверить статус, в котором находится ваш репозиторий, наберите в терминале:
git status

Статус репозитория показывает информацию о текущем состоянии репозитория: есть ли что-то новое в репозитории, изменились ли какие-то файлы, и если да, то какие, и так далее.

СООБЩЕНИЯ, КОТОРЫЕ ВЫ МОЖЕТЕ ВСТРЕТИТЬ ПРИ ПРОВЕРКЕ СТАТУСА:
On branch master - Сообщение означает, что в настоящий момент активна ветка master. Как правило, это основная ветка в репозитории.
Your branch is up to date with origin/master. - Сообщение означает, что файлы в ветке master синхронизированы с веткой master на сервере. Origin — это и есть удалённый сервер.
Working tree clean - дословно означает, что рабочий каталог не содержит изменённых файлов. Система контроля версий Git использует так называемую архитектуру трёх деревьев. 
Working tree  связана с рабочей директорией Git, в которой содержатся рабочие версии файлов.
Nothing to commit  - значит, что все изменения были зафиксированы и нет новых изменений в файлах для фиксации изменений.


коммит — это состояние репозитория в определённый момент времени. Именно к коммиту мы можем возвращаться, чтобы посмотреть состояние объектов в какое-то время.

git add -A		 # Добавить все фалйы в репозитарий. Она сообщает Git, что вы хотите включить изменения в следующий коммит
git add this.js 	 # Добавить this.js файл в репозитарий

git commit — команда, которая создаёт коммит («снимок» изменений проекта) с рядом параметров.
Добавленные коммиты можно рассматривать как «безопасные» версии проекта: Git никогда не изменит их, если только вы специальным образом не потребуете этого.
Флаг -m означает, что следом идёт сообщение (message): ярлык для наших изменений.
git commit -m "Init Skillfactory"
git status

«Под капотом» Git работает с SHA-1 хешами, а не с именами файлов. Для того чтобы определять целостность данных при каждом их изменении.

Содержимое директории .git
Рассмотрим, что содержится в папках и файлах:

В файле config находятся настройки данного репозитория. Его содержимое представлено в текстовом формате.
Файл HEAD указывает на текущую ветку.
В файле index хранится содержимое индекса.
В директории objects находится, собственно, база данных объектов Git. Если открыть каталог objects, то в нём будут находиться каталоги, имена которых представлены двумя шестнадцатеричными числами, внутри которых будут файлы, имена которых представлены 38 шестнадцатеричными числами. Вместе имя каталога и файл образуют 40-разрядный хэш, взятый от имени файла и его содержимого.
В директории refs находятся ссылки на объекты коммитов в этой базе (ветки).
Директория logs хранит логи коммитов.
В директории info расположен файл с глобальными настройкам игнорирования файлов. Он позволяет исключить файлы, которые вы не хотите помещать в .gitignore. Позднее мы остановимся на назначении файла .gitignore.
В директории hooks располагаются клиентские и серверные триггеры. Желающие прочитать про них могут обратиться к руководству по Git.


Допустим, у вас вдруг появилась гениальная идея по улучшению кода или реализации инновационной фичи. Но пока вы хотите посмотреть, что из этого получится, не внося изменения в уже существующий процесс. В этом вам поможет ветвление, которое позволяет отклониться от основного вектора разработки и внести какие-то изменения параллельно, в другой ветке, не влияя на основную версию.

Ветка — это всего лишь указатель на коммит, не меняющий репозиторий. Когда вы делаете коммиты, не создавая и не меняя ветки, то работаете в ветке master. Она указывает на последний сделанный коммит и при каждом новом коммите сдвигается вперёд автоматически. 
Git хранит специальный указатель, который называется HEAD (верхушка). HEAD указывает на локальную ветку, на которой вы находитесь.
git branch awesome-branch  	# Создание ветки, но не переключение на неё для работы.
git checkout awesome-branch 	# Перейти на существующую ветку

*Если вы ошиблись в названии, например, допустили опечатку, вы можете изменить название ветки с помощью команды: git branch -m старое-имя-ветки новое-имя-ветки.
git branch -m awesome-branch  black-friday
git checkout black-friday

Допустим, мы изменили файл index.html. Теперь мы хотим зафиксировать эти изменения.
git add index.html
git commit -m ''basic changes for Black Friday''

Чтобы внести изменения из одной ветки в другую, нужно выполнить команду git merge. По-русски 
Слияние — это способ соединить обратно раздвоенную историю. Команда git merge («вмержить», «смержить» или «сделать мерж») позволяет взять независимые части разработки и интегрировать их в одну ветку.

Если бы мы хотели влить новые изменения в текущую ветку (Black Friday), то надо было бы выполнить команду: git merge master, что означало бы, что в текущую ветку мы хотим влить ветку с именем master. Это очень полезно, когда программист долго разрабатывает какой-то новый функционал, а за это время в основной ветке происходят какие-то изменения, с которыми ему необходимо считаться.

В нашем же случае нам надо наоборот в ветку master влить black-friday. Как это можно сделать?

Для этого нам надо сначала переключиться на ту ветку, в которую мы хотим вливать, а затем уже «мержить».
git checkout master
git merge black-friday
Ура! Изменения для Чёрной пятницы теперь доступны всем!
удалить ветку, достаточно выполнить команду:
git branch -d black-friday

git log - показывает историю изменений: перечисляет коммиты, сделанные в репозитории, в обратном хронологическом порядке. Последние коммиты находятся вверху.
git branch --list. Она выведет список веток, которые существуют в вашем локальном репозитории. Текущая ветка master будет выделена зелёным цветом.
git branch --list -v . Вы увидите информацию о последних коммитах каждой из веток. 

Cвязать локальный репозиторий на компьютере с удалённым репозиторием, который на GitHub.

git remote add origin https://github.com/<your_name>/<remote_repository_name>.git

добавить локальные изменения (коммит) на удалённый сервер. Для этого в терминале выполните команду:
git push origin master